name: Docker

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - '**.yml'
      - '**.yaml'
      - '**.md'
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [update]
  workflow_dispatch:

env:
  PLATFORMS: "linux/amd64, linux/arm64, linux/s390x"
  BUILD_PLATFORMS: "linux/ppc64le"

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:
    build-docker:
      name: Build Docker Image
      runs-on: ubuntu-20.04
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Output Variables
          id: var
          run: |
            nginx_v=$(grep -m1 'FROM nginx:' <Dockerfile | awk -F'[: ]' '{print $3}')
            docker pull nginx:$nginx_v || exit 1
            njs=$(docker run nginx:$nginx_v env | grep NJS_VERSION | cut -d= -f2)
            echo "NJS_VERSION=$njs"
            echo "::set-output name=nginx_version::$nginx_v"
            echo "::set-output name=njs_version::$njs"

        - name: Setup QEMU
          uses: docker/setup-qemu-action@v3
          with:
            platforms: arm,arm64,ppc64le,s390x
          if: github.event_name != 'pull_request'

        - name: Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            buildkitd-flags: --debug

        - name: DockerHub Login
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
          if: github.event_name != 'pull_request'

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
          if: github.event_name != 'pull_request'

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: |
              nginxcontrib/nginx-ubi
              ghcr.io/lucacome/nginx-ubi
            tags: |
              type=raw,value=${{ steps.var.outputs.nginx_version }}

        - name: Build from source
          uses: docker/build-push-action@v5
          id: build
          with:
            pull: true
            load: ${{ github.event_name == 'pull_request' }}
            push: ${{ github.event_name != 'pull_request' }}
            platforms: ${{ github.event_name != 'pull_request' && env.BUILD_PLATFORMS || '' }}
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha,scope=source
            cache-to: type=gha,scope=source,mode=max
            target: final
            provenance: ${{ github.event_name != 'pull_request' }}
            sbom: ${{ github.event_name != 'pull_request' }}
            build-args: |
              NGINX=${{ steps.var.outputs.nginx_version }}
              NJS=${{ steps.var.outputs.njs_version }}

        - name: Build prebuilt
          uses: docker/build-push-action@v5
          id: build-prebuilt
          with:
            pull: true
            load: ${{ github.event_name == 'pull_request' }}
            push: ${{ github.event_name != 'pull_request' }}
            platforms: ${{ github.event_name != 'pull_request' && env.PLATFORMS || '' }}
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha,scope=prebuilt
            cache-to: type=gha,scope=prebuilt,mode=max
            target: final
            file: Dockerfile.prebuilt
            provenance: ${{ github.event_name != 'pull_request' }}
            sbom: ${{ github.event_name != 'pull_request' }}
            build-args: |
              NGINX=${{ steps.var.outputs.nginx_version }}
              NJS=${{ steps.var.outputs.njs_version }}

        - name: Combine images
          run: |
            docker buildx imagetools create nginxcontrib/nginx-ubi@${{ steps.build.outputs.digest }} ${{ steps.build-prebuilt.outputs.digest }} --tag nginxcontrib/nginx-ubi:${{ steps.meta.outputs.version }}
            docker buildx imagetools create nginxcontrib/nginx-ubi:${{ steps.meta.outputs.version }} --tag nginxcontrib/nginx-ubi:latest
            docker buildx imagetools create nginxcontrib/nginx-ubi:${{ steps.meta.outputs.version }} --tag nginxcontrib/nginx:latest-ubi
            docker buildx imagetools create nginxcontrib/nginx-ubi:${{ steps.meta.outputs.version }} --tag nginxcontrib/nginx:${{ steps.meta.outputs.version }}-ubi

            docker buildx imagetools create ghcr.io/lucacome/nginx-ubi@${{ steps.build.outputs.digest }} ${{ steps.build-prebuilt.outputs.digest }} --tag ghcr.io/lucacome/nginx-ubi:${{ steps.meta.outputs.version }}
            docker buildx imagetools create ghcr.io/lucacome/nginx-ubi:${{ steps.meta.outputs.version }} --tag ghcr.io/lucacome/nginx-ubi:latest
            docker buildx imagetools create ghcr.io/lucacome/nginx-ubi:${{ steps.meta.outputs.version }} --tag ghcr.io/lucacome/nginx:latest-ubi
            docker buildx imagetools create ghcr.io/lucacome/nginx-ubi:${{ steps.meta.outputs.version }} --tag ghcr.io/lucacome/nginx:${{ steps.meta.outputs.version }}-ubi
          if: github.event_name != 'pull_request'
